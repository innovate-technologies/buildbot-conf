import json

from buildbot.plugins import changes, reporters, schedulers, steps, util, worker

WORKER_PASSWORDS = json.load(open("worker-passwords.json"))
HUB_WEBHOOK_URL = open("hub-webhook-url.txt").read().strip()
CHANGESOURCE_PASSWORD = open("changesource-password.txt").read().strip()
GITHUB_CLIENT_ID = open("github-client-id.txt").read().strip()
GITHUB_CLIENT_SECRET = open("github-client-secret.txt").read().strip()

from twisted.protocols.basic import NetstringReceiver
NetstringReceiver.MAX_LENGTH = 100 * 10**6

def add_js_project_steps(f, repourl, env):
    """Adds JavaScript project build steps to a factory.
    This assumes that the project uses npm and has configured npm run build and npm run test."""
    f.addStep(steps.Git(repourl=repourl,
                        mode="incremental", progress=True, haltOnFailure=True))

    f.addStep(steps.ShellCommand(command=["npm", "install"],
                                 description="npm installing",
                                 descriptionDone="npm install",
                                 haltOnFailure=True,
                                 env=env))

    f.addStep(steps.ShellCommand(command=["npm", "run", "build"],
                                 description="building",
                                 descriptionDone="build",
                                 haltOnFailure=True,
                                 env=env))

    f.addStep(steps.ShellCommand(command=["npm", "run", "test"],
                                 description="testing",
                                 descriptionDone="test",
                                 haltOnFailure=True,
                                 env=env))

    return f

def make_master_build_control():
    """Returns a factory for building Control and deploying a release build."""
    f = util.BuildFactory()
    add_js_project_steps(f=f, repourl="https://github.com/innovate-technologies/control", env={})
    # TODO: deploy
    return f

def make_pr_build_control():
    """Returns a factory for building Control and deploying a PR build."""
    f = util.BuildFactory()
    public_path = util.Interpolate("https://pr.control.st/%(prop:pr_number)s/")
    add_js_project_steps(f, repourl="https://github.com/innovate-technologies/control", env={
        "PUBLIC_PATH": public_path,
    })
    f.addStep(steps.DirectoryUpload(workersrc="dist",
                                    masterdest=util.Interpolate(
                                        "/mnt/control/pr/%(prop:pr_number)s"),
                                    url=public_path,
                                   ))
    return f

rel_control_change_filter = util.ChangeFilter(branch="master",
                                              repository="innovate-technologies/control")

BuildmasterConfig = {
    "title": "Innovate",
    "titleURL": "https://innovatetechnologi.es",
    "buildbotURL": "https://buildbot.innovatete.ch/",

    "workers": [
        worker.Worker("xenial", WORKER_PASSWORDS["xenial"], max_builds=1),
    ],

    "change_source": [
        changes.PBChangeSource(port=9999, user="changes", passwd=CHANGESOURCE_PASSWORD),
    ],

    "builders": [
        util.BuilderConfig(name="rel-control", workernames=["xenial"],
                           factory=make_master_build_control()),
        util.BuilderConfig(name="pr-control", workernames=["xenial"],
                           factory=make_pr_build_control()),
    ],

    "schedulers": [
        schedulers.SingleBranchScheduler(name="rel-control", builderNames=["rel-control"],
                                         change_filter=rel_control_change_filter),
        schedulers.Try_Jobdir(name="pr-control",
                              builderNames=[
                                  "pr-control",
                              ],
                              jobdir="/srv/buildbot-pr-jobdir/innovate-technologies/control")
    ],

    "services": [
        reporters.HttpStatusPush(serverUrl=HUB_WEBHOOK_URL, wantProperties=True),
    ],

    "www": {
        "port": 8010,
        "plugins": {
            "waterfall_view": {},
            "console_view":{}
        },
        "auth": util.GitHubAuth(GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET),
        "authz": util.Authz(
            allowRules=[
                util.AnyEndpointMatcher(role="innovate-technologies", defaultDeny=False),
                util.StopBuildEndpointMatcher(role="innovate-technologies"),
                util.RebuildBuildEndpointMatcher(role="innovate-technologies"),
            ],
            roleMatchers=[
                util.RolesFromGroups()
            ]
        ),
    },

    "db_url": "sqlite:///state.sqlite",

    "protocols": {"pb": {"port": 9989}},
}
